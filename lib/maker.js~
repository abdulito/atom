
/*******************************************************************************
 * @class Maker
 */
var TYPE_FIELD = '_type';

/*******************************************************************************
 * @class Maker
 * @ignore
 */
function Maker(prototypeResolver) {
    this._prototypeResolver = prototypeResolver;
};

Maker.prototype = {

    /***************************************************************************
     * _prototypeResolver
     */
    _prototypeResolver : null;

    /***************************************************************************
     * make
     * 
     * @param {Object} datum
     */
    make : function(datum, result) {

        // primitives
        if (datum === null) {
            return null;
        }

        if (datum === undefined) {
            return undefined;
        }

        dtype = typeof(datum);
        if (dtype === 'string') {
            return datum;
        }

        if (dtype === 'boolean') {
            return datum;
        }

        if (dtype === 'number') {
            return datum;
        }

        if (dtype === 'function') {
            return datum;
        }

        // arrays
        if (datum.constructor === Array) {
            var self = this;
            return datum.map(function(elem) { self.make(elem); });
        }

        // objects
        if (dtype === 'object') {
            if (datum._ref) {
                return require('link')._(datum._ref);
            }

            result = result || this.instantiate(datum);
        
            for (var property in datum) {
                if (property !== TYPE_FIELD && datum.hasOwnProperty(property)) {
                    var value = this.make(datum[property]);
                    this._defineProperty(result, property, value);
                }
            }
            return result;
        }

        throw new Error("Unable to make from datum: " + datum);
    },

    /***************************************************************************
     * instantiate
     * 
     * @param prototype
     */
    instantiate : function(datum) {
        return this._instantiateFromPrototype(datum[TYPE_FIELD]);
    },

    /***************************************************************************
     * _instantiateFromPrototype
     * 
     * @param prototype
     * @ignore
     */
    _instantiateFromPrototype : function(proto) {
        proto = proto || Object;

        if (typeof(proto) === 'string') {
            var resolver = this._prototypeResolver;
            if (resolver) {
                var protoName = proto;
                // TODO: not sure why require() is a must here...
                // proto = require('link')._(protoName); 
                proto = resolver(protoName);
                if (!proto) {
                    throw new Error("Could not resolve _type " + protoName);
                }
            } else {
                throw new Error("Could not find _type: " + proto);
            }
        }

        if (typeof(proto) === 'function') { // constructor
            return new proto();
        }

        // otherwise assume it is an object prototype
        var type = this._cloneObject(proto);        
        var F = function() {};
        F.prototype = type;
        var result = new F();

        return result;
    },

    /***************************************************************************
     * _defineProperty
     * 
     * @param prototype
     */
    _defineProperty : function(obj, property, value) {
        obj[property] = value;
    },

    /***************************************************************************
     * _cloneObject
     * 
     * @param o object to clone
     */
    _cloneObject : function(obj, cloned) {
        if (!cloned) {
            cloned = new Object.constructor();
        }
        var value;
        for (var propName in obj) {
            value = obj[propName];
            if (value && (value.constructor == Object || 
                          value.constructor == Array)) 
            {
                cloned[propName] = 
                    this._cloneObject(value, new value.constructor());
            } else {
                cloned[propName] = value;
            }
        }
        return cloned;
    }
};

// exports
if (typeof exports != "undefined") {
    exports.Maker = Maker;
}
